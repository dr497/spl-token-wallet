{"version":3,"sources":["../node_modules/bip39/src/index.js","../node_modules/bip39/src/_wordlists.js"],"names":["Object","defineProperty","exports","value","createHash","require","pbkdf2_1","randomBytes","_wordlists_1","DEFAULT_WORDLIST","_default","WORDLIST_REQUIRED","lpad","str","padString","length","binaryToByte","bin","parseInt","bytesToBinary","bytes","map","x","toString","join","deriveChecksumBits","entropyBuffer","CS","hash","update","digest","slice","salt","password","mnemonicToEntropy","mnemonic","wordlist","Error","words","normalize","split","bits","word","index","indexOf","dividerIndex","Math","floor","entropyBits","checksumBits","entropyBytes","match","entropy","Buffer","from","entropyToMnemonic","isBuffer","TypeError","binary","mnemonicToSeedSync","mnemonicBuffer","saltBuffer","pbkdf2Sync","mnemonicToSeed","Promise","resolve","reject","pbkdf2","err","data","error","generateMnemonic","strength","rng","validateMnemonic","e","setDefaultWordlist","language","result","wordlists","getDefaultWordlist","keys","filter","lang","every","_wordlists_2","chinese_simplified","chinese_traditional","korean","french","italian","spanish","japanese","JA","english","EN"],"mappings":"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","file":"static/js/0.3098509b.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst createHash = require(\"create-hash\");\nconst pbkdf2_1 = require(\"pbkdf2\");\nconst randomBytes = require(\"randombytes\");\nconst _wordlists_1 = require(\"./_wordlists\");\nlet DEFAULT_WORDLIST = _wordlists_1._default;\nconst INVALID_MNEMONIC = 'Invalid mnemonic';\nconst INVALID_ENTROPY = 'Invalid entropy';\nconst INVALID_CHECKSUM = 'Invalid mnemonic checksum';\nconst WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\\n' +\n    'Please explicitly pass a 2048 word array explicitly.';\nfunction lpad(str, padString, length) {\n    while (str.length < length)\n        str = padString + str;\n    return str;\n}\nfunction binaryToByte(bin) {\n    return parseInt(bin, 2);\n}\nfunction bytesToBinary(bytes) {\n    return bytes.map(x => lpad(x.toString(2), '0', 8)).join('');\n}\nfunction deriveChecksumBits(entropyBuffer) {\n    const ENT = entropyBuffer.length * 8;\n    const CS = ENT / 32;\n    const hash = createHash('sha256')\n        .update(entropyBuffer)\n        .digest();\n    return bytesToBinary([...hash]).slice(0, CS);\n}\nfunction salt(password) {\n    return 'mnemonic' + (password || '');\n}\nfunction mnemonicToSeedSync(mnemonic, password) {\n    const mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');\n    const saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');\n    return pbkdf2_1.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\nfunction mnemonicToSeed(mnemonic, password) {\n    return new Promise((resolve, reject) => {\n        try {\n            const mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');\n            const saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');\n            pbkdf2_1.pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', (err, data) => {\n                if (err)\n                    return reject(err);\n                else\n                    return resolve(data);\n            });\n        }\n        catch (error) {\n            return reject(error);\n        }\n    });\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    const words = (mnemonic || '').normalize('NFKD').split(' ');\n    if (words.length % 3 !== 0)\n        throw new Error(INVALID_MNEMONIC);\n    // convert word indices to 11 bit binary strings\n    const bits = words\n        .map(word => {\n        const index = wordlist.indexOf(word);\n        if (index === -1)\n            throw new Error(INVALID_MNEMONIC);\n        return lpad(index.toString(2), '0', 11);\n    })\n        .join('');\n    // split the binary string into ENT/CS\n    const dividerIndex = Math.floor(bits.length / 33) * 32;\n    const entropyBits = bits.slice(0, dividerIndex);\n    const checksumBits = bits.slice(dividerIndex);\n    // calculate the checksum and compare\n    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n    if (entropyBytes.length < 16)\n        throw new Error(INVALID_ENTROPY);\n    if (entropyBytes.length > 32)\n        throw new Error(INVALID_ENTROPY);\n    if (entropyBytes.length % 4 !== 0)\n        throw new Error(INVALID_ENTROPY);\n    const entropy = Buffer.from(entropyBytes);\n    const newChecksum = deriveChecksumBits(entropy);\n    if (newChecksum !== checksumBits)\n        throw new Error(INVALID_CHECKSUM);\n    return entropy.toString('hex');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n    if (!Buffer.isBuffer(entropy))\n        entropy = Buffer.from(entropy, 'hex');\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    // 128 <= ENT <= 256\n    if (entropy.length < 16)\n        throw new TypeError(INVALID_ENTROPY);\n    if (entropy.length > 32)\n        throw new TypeError(INVALID_ENTROPY);\n    if (entropy.length % 4 !== 0)\n        throw new TypeError(INVALID_ENTROPY);\n    const entropyBits = bytesToBinary([...entropy]);\n    const checksumBits = deriveChecksumBits(entropy);\n    const bits = entropyBits + checksumBits;\n    const chunks = bits.match(/(.{1,11})/g);\n    const words = chunks.map(binary => {\n        const index = binaryToByte(binary);\n        return wordlist[index];\n    });\n    return wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093' // Japanese wordlist\n        ? words.join('\\u3000')\n        : words.join(' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction generateMnemonic(strength, rng, wordlist) {\n    strength = strength || 128;\n    if (strength % 32 !== 0)\n        throw new TypeError(INVALID_ENTROPY);\n    rng = rng || randomBytes;\n    return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nfunction setDefaultWordlist(language) {\n    const result = _wordlists_1.wordlists[language];\n    if (result)\n        DEFAULT_WORDLIST = result;\n    else\n        throw new Error('Could not find wordlist for language \"' + language + '\"');\n}\nexports.setDefaultWordlist = setDefaultWordlist;\nfunction getDefaultWordlist() {\n    if (!DEFAULT_WORDLIST)\n        throw new Error('No Default Wordlist set');\n    return Object.keys(_wordlists_1.wordlists).filter(lang => {\n        if (lang === 'JA' || lang === 'EN')\n            return false;\n        return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);\n    })[0];\n}\nexports.getDefaultWordlist = getDefaultWordlist;\nvar _wordlists_2 = require(\"./_wordlists\");\nexports.wordlists = _wordlists_2.wordlists;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// browserify by default only pulls in files that are hard coded in requires\n// In order of last to first in this file, the default wordlist will be chosen\n// based on what is present. (Bundles may remove wordlists they don't need)\nconst wordlists = {};\nexports.wordlists = wordlists;\nlet _default;\nexports._default = _default;\ntry {\n    exports._default = _default = require('./wordlists/chinese_simplified.json');\n    wordlists.chinese_simplified = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_traditional.json');\n    wordlists.chinese_traditional = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/korean.json');\n    wordlists.korean = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/french.json');\n    wordlists.french = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/italian.json');\n    wordlists.italian = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/spanish.json');\n    wordlists.spanish = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/japanese.json');\n    wordlists.japanese = _default;\n    wordlists.JA = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/english.json');\n    wordlists.english = _default;\n    wordlists.EN = _default;\n}\ncatch (err) { }\n"],"sourceRoot":""}